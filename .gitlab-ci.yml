image: docker:latest
services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay2
  SPRING_PROFILES_ACTIVE: gitlab-ci
  TAG: $CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA
  SERVICE_NAME: $SERVICE_NAME
  APP_NAME: biofarma-q100-$CI_COMMIT_BRANCH/$SERVICE_NAME
  CLUSTER_NAME: biofarma-q100-$CI_COMMIT_BRANCH
  NAME_SERVICE: qcs-product

stages:
  - build
  - testing
  - deploy

build-development:
  stage: build
  only:
    refs:
      - development
  variables:
    IMAGE_TAG: docker:latest
  script:
    - export ENV_VARIABLE=$env_development
    - echo $GCP_CREDS_DEV > /tmp/bf-q100-dti-dev.json
    - docker build -t $GCR_URL_DEV/$APP_NAME:latest -t $GCR_URL_DEV/$APP_NAME:$TAG .
    - docker login -u _json_key -p "$(cat /tmp/bf-q100-dti-dev.json)" $GCR_URL_DEV
    - docker push $GCR_URL_DEV/$APP_NAME:$TAG
  tags:
    - biofarma-runner-vm

build-testing:
  stage: build
  only:
    refs:
      - testing
  variables:
    IMAGE_TAG: docker:latest
  script:
    - export ENV_VARIABLE=$env_testing
    - echo $GCP_CREDS_TESTING > /tmp/bf-q100-dti-qa.json
    - docker build -t $GCR_URL_TESTING/$APP_NAME:latest -t $GCR_URL_TESTING/$APP_NAME:$TAG .
    - docker login -u _json_key -p "$(cat /tmp/bf-q100-dti-qa.json)" $GCR_URL_TESTING
    - docker push $GCR_URL_TESTING/$APP_NAME:$TAG
  tags:
    - biofarma-runner-vm

build-staging:
  stage: build
  only:
    refs:
      - staging
  variables:
    IMAGE_TAG: docker:latest
  script:
    - export ENV_VARIABLE=$env_staging  
    - echo $GCP_CREDS_TESTING > /tmp/bf-q100-dti-qa.json
    - docker build -t $GCR_URL_TESTING/$APP_NAME:latest -t $GCR_URL_TESTING/$APP_NAME:$TAG .
    - docker login -u _json_key -p "$(cat /tmp/bf-q100-dti-qa.json)" $GCR_URL_TESTING
    - docker push $GCR_URL_TESTING/$APP_NAME:$TAG
  tags:
    - biofarma-runner-vm

build-softlive:
  stage: build
  only:
    refs:
      - softlive-2
  variables:
    IMAGE_TAG: docker:latest
  script:
  - export ENV_VARIABLE=$env_softlive 
  - echo $GCP_CREDS_SOFTLIVE > /tmp/bf-q100-dti-softlive.json
  - docker build -t $GCR_URL_SOFTLIVE/$APP_NAME:latest -t $GCR_URL_SOFTLIVE/$APP_NAME:$TAG . 
  - docker login -u _json_key -p "$(cat /tmp/bf-q100-dti-softlive.json)" $GCR_URL_SOFTLIVE
  - docker push $GCR_URL_SOFTLIVE/$APP_NAME:$TAG
  tags:
    - biofarma-runner-vm

build-Production:
  stage: build
  only:
    refs:
      - production
  variables:
    IMAGE_TAG: docker:latest
  script:
  - export ENV_VARIABLE=$env_production
  - echo $GCP_CREDS_PRODUCTION > /tmp/bf-q100-dti-production.json
  - docker build -t $GCR_URL_PRODUCTION/$APP_NAME:latest -t $GCR_URL_PRODUCTION/$APP_NAME:$TAG . 
  - docker login -u _json_key -p "$(cat /tmp/bf-q100-dti-production.json)" $GCR_URL_PRODUCTION
  - docker push $GCR_URL_PRODUCTION/$APP_NAME:$TAG
  tags:
    - biofarma-runner-vm     

sonarqube-check:
  stage: testing
  only:
    refs:
      - testing
  image: mcr.microsoft.com/dotnet/core/sdk:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - "dotnet nuget locals all --clear"
    - "dotnet sonarscanner begin /k:\"$SONAR_Q100_FRONTEND\" /d:sonar.login=\"$SONAR_TOKEN\" /d:\"sonar.host.url=$SONAR_HOST_URL\" "
    - "dotnet build"
    - "dotnet sonarscanner end /d:sonar.login=\"$SONAR_TOKEN\""
  allow_failure: true
  only:
    - testing
  tags:
    - biofarma-runner-vm

sonarqube-check:
  stage: testing
  only:
    refs:
      - testing
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - testing
  tags:
    - biofarma-runner-vm

owasp_dependency_check:
  only:
    refs:
      - testing
  image:
    name: registry.gitlab.com/gitlab-ci-utils/docker-dependency-check:latest
    entrypoint: [""]
  stage: testing
  script:
    # Job will scan the project root folder and fail if any vulnerabilities with CVSS > 0 are found
    - dependency-check.sh --scan "./" --format ALL --project "$CI_PROJECT_NAME" --failOnCVSS 0
    # Dependency Check will only fail the job based on CVSS scores, and in some cases vulnerabilities do not
    # have CVSS scores (e.g. those from NPM audit), so they don't cause failure.  To fail for any vulnerabilities
    # grep the resulting report for any "vulnerabilities" sections and exit if any are found (count > 0).
    - if [ $(grep -c "vulnerabilities" dependency-check-report.json) -gt 0 ]; then exit 2; fi
  allow_failure: true
  artifacts:
    when: always
    paths:
      # Save the HTML and JSON report artifacts
      - "./dependency-check-report.html"
      - "./dependency-check-report.json"
  tags:
    - biofarma-runner-vm

deploy-development:
  stage: deploy
  only:
    refs:
      - development
  image: docker:latest
  script:
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.15.1/bin/linux/amd64/kubectl && chmod u+x kubectl && sudo mv kubectl /bin/kubectl
    - echo $GCP_CREDS_DEV > /tmp/bf-q100-dti-dev.json
    - gcloud auth activate-service-account --key-file /tmp/bf-q100-dti-dev.json
    - gcloud config set project $PROJECT_DEV
    - gcloud container clusters get-credentials --internal-ip $CLUSTER_NAME --region asia-southeast2 --project $PROJECT_DEV
    - export NAME=$NAME_SERVICE
    - export IMAGE=$GCR_URL_DEV/$APP_NAME:$TAG
    - export ENV=dev
    - envsubst < $NAME_SERVICE.yml | kubectl apply -f -
  tags:
    - biofarma-runner-vm

deploy-testing:
  stage: deploy
  only:
    refs:
      - testing
  image: docker:latest
  script:
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.15.1/bin/linux/amd64/kubectl && chmod u+x kubectl && sudo mv kubectl /bin/kubectl
    - echo $GCP_CREDS_TESTING > /tmp/bf-q100-dti-qa.json
    - gcloud auth activate-service-account --key-file /tmp/bf-q100-dti-qa.json
    - gcloud config set project $PROJECT_TESTING
    - gcloud container clusters get-credentials --internal-ip $CLUSTER_NAME --region asia-southeast2 --project $PROJECT_TESTING
    - export NAME=$NAME_SERVICE
    - export IMAGE=$GCR_URL_TESTING/$APP_NAME:$TAG
    - export ENV=testing
    - envsubst < $NAME_SERVICE.yml | kubectl apply -f -
  tags:
    - biofarma-runner-vm

deploy-staging:
  stage: deploy
  only:
    refs:
      - staging
  image: docker:latest
  script:
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.15.1/bin/linux/amd64/kubectl && chmod u+x kubectl && sudo mv kubectl /bin/kubectl
    - echo $GCP_CREDS_TESTING > /tmp/bf-q100-dti-qa.json
    - gcloud auth activate-service-account --key-file /tmp/bf-q100-dti-qa.json
    - gcloud config set project $PROJECT_TESTING
    - gcloud container clusters get-credentials --internal-ip biofarma-q100-testing --region asia-southeast2 --project $PROJECT_TESTING
    - export NAME=$NAME_SERVICE-staging
    - export IMAGE=$GCR_URL_TESTING/$APP_NAME:$TAG
    - export ENV=testing
    - envsubst < $NAME_SERVICE.yml | kubectl apply -f -
  tags:
    - biofarma-runner-vm

deploy-softlive:
  stage: deploy
  only:
    refs:
      - softlive-2
  image: docker:latest
  script:
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.15.1/bin/linux/amd64/kubectl && chmod u+x kubectl && sudo mv kubectl /bin/kubectl
    - echo $GCP_CREDS_SOFTLIVE > /tmp/bf-q100-dti-softlive.json
    - gcloud auth activate-service-account --key-file /tmp/bf-q100-dti-qa.json
    - gcloud config set project $PROJECT_SOFTLIVE
    - gcloud container clusters get-credentials --internal-ip biofarma-q100-softlive --region asia-southeast2 --project $PROJECT_SOFTLIVE
    - export NAME=$NAME_SERVICE
    - export IMAGE=$GCR_URL_SOFTLIVE/$APP_NAME:$TAG
    - export ENV=softlive
    - envsubst < $NAME_SERVICE.yml | kubectl apply -f -
  tags:
    - biofarma-runner-vm

deploy-production:
  stage: deploy
  only:
    refs:
      - production
  image: docker:latest
  script:
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.15.1/bin/linux/amd64/kubectl && chmod u+x kubectl && sudo mv kubectl /bin/kubectl
    - echo $GCP_CREDS_PRODUCTION > /tmp/bf-q100-dti-production.json
    - gcloud auth activate-service-account --key-file /tmp/bf-q100-dti-production.json
    - gcloud config set project $PROJECT_PRODUCTION
    - gcloud container clusters get-credentials --internal-ip $CLUSTER_NAME --region asia-southeast2 --project $PROJECT_PRODUCTION
    - export NAME=$NAME_SERVICE
    - export IMAGE=$GCR_URL_PRODUCTION/$APP_NAME:$TAG
    - export ENV=production
    - envsubst < $NAME_SERVICE.yml | kubectl apply -f -
  tags:
    - biofarma-runner-vm
