// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using qcs_product.API.Infrastructure;

namespace qcs_product.API.Migrations
{
    [DbContext(typeof(QcsProductContext))]
    partial class QcsProductContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("qcs_product.API.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("activity");
                });

            modelBuilder.Entity("qcs_product.API.Models.AuthenticatedUserBiohr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Token")
                        .HasColumnName("token")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("authenticated_user_biohr");
                });

            modelBuilder.Entity("qcs_product.API.Models.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("building_id")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("building_name")
                        .HasColumnType("character varying");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("building");
                });

            modelBuilder.Entity("qcs_product.API.Models.DigitalSignature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnName("begin_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Nik")
                        .HasColumnName("nik")
                        .HasColumnType("character varying");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnName("serial_number")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("digital_signature");
                });

            modelBuilder.Entity("qcs_product.API.Models.EmProductionPhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("FacilityId")
                        .HasColumnName("facility_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.Property<string>("QcEm")
                        .HasColumnName("qc_em")
                        .HasColumnType("text");

                    b.Property<string>("QcProduct")
                        .HasColumnName("qc_product")
                        .HasColumnType("text");

                    b.Property<int>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("em_production_phase");
                });

            modelBuilder.Entity("qcs_product.API.Models.EnumConstant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("KeyGroup")
                        .HasColumnName("key_group")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("TypeId")
                        .HasColumnName("type_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("keyValueLabel")
                        .HasColumnName("key_value_label")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("enum_constant");
                });

            modelBuilder.Entity("qcs_product.API.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("facility_code")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("facility_name")
                        .HasColumnType("character varying");

                    b.Property<int>("ObjectStatus")
                        .HasColumnName("object_status")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("facility");
                });

            modelBuilder.Entity("qcs_product.API.Models.FormMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BatchNumber")
                        .HasColumnName("batch_number")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<decimal>("DefaultPackageQty")
                        .HasColumnName("default_package_qty")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DefaultQty")
                        .HasColumnName("default_qty")
                        .HasColumnType("numeric");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnName("group_name")
                        .HasColumnType("character varying");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("ProcessId")
                        .HasColumnName("process_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying");

                    b.Property<int>("SectionId")
                        .HasColumnName("section_id")
                        .HasColumnType("integer");

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("integer");

                    b.Property<int>("Uom")
                        .HasColumnName("uom")
                        .HasColumnType("integer");

                    b.Property<int>("UomPackage")
                        .HasColumnName("uom_package")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("form_material");
                });

            modelBuilder.Entity("qcs_product.API.Models.FormParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DefaultValue")
                        .HasColumnName("default_value")
                        .HasColumnType("text");

                    b.Property<int?>("FormProcedureId")
                        .HasColumnType("integer");

                    b.Property<int>("InputType")
                        .HasColumnName("input_type")
                        .HasColumnType("integer");

                    b.Property<bool>("IsForAllSample")
                        .HasColumnName("is_for_all_sample")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsResult")
                        .HasColumnName("is_result")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<bool>("NeedAttachment")
                        .HasColumnName("need_attachment")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("text");

                    b.Property<int>("ProcedureId")
                        .HasColumnName("procedure_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("text");

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("integer");

                    b.Property<int?>("ThresholdOperator")
                        .HasColumnName("threshold_operator")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ThresholdValue")
                        .HasColumnName("threshold_value")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ThresholdValueFrom")
                        .HasColumnName("threshold_value_from")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ThresholdValueTo")
                        .HasColumnName("threshold_value_to")
                        .HasColumnType("numeric");

                    b.Property<int?>("Uom")
                        .HasColumnName("uom")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("FormProcedureId");

                    b.ToTable("form_parameter");
                });

            modelBuilder.Entity("qcs_product.API.Models.FormProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<int>("ProcessId")
                        .HasColumnName("process_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying");

                    b.Property<int>("SectionId")
                        .HasColumnName("section_id")
                        .HasColumnType("integer");

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("form_procedure");
                });

            modelBuilder.Entity("qcs_product.API.Models.FormSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnName("type_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("form_section");
                });

            modelBuilder.Entity("qcs_product.API.Models.FormTool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<int?>("ItemId")
                        .HasColumnName("item_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("ProcessId")
                        .HasColumnName("process_id")
                        .HasColumnType("integer");

                    b.Property<decimal>("Qty")
                        .HasColumnName("qty")
                        .HasColumnType("numeric");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying");

                    b.Property<int>("SectionId")
                        .HasColumnName("section_id")
                        .HasColumnType("integer");

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("integer");

                    b.Property<int>("ToolId")
                        .HasColumnName("tool_id")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("form_tool");
                });

            modelBuilder.Entity("qcs_product.API.Models.GradeRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GradeRoomDefault")
                        .HasColumnName("grade_room_default")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("ObjectStatus")
                        .HasColumnName("object_status")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("text");

                    b.Property<int>("TestGroupId")
                        .HasColumnName("test_group_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("grade_room");
                });

            modelBuilder.Entity("qcs_product.API.Models.InputType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Label")
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .HasColumnName("reference")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceType")
                        .HasColumnName("reference_type")
                        .HasColumnType("text");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("TypeId")
                        .HasColumnName("type_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("input_type");
                });

            modelBuilder.Entity("qcs_product.API.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ItemCode")
                        .HasColumnName("item_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("ItemGroupId")
                        .HasColumnName("item_group_id")
                        .HasColumnType("integer");

                    b.Property<string>("ItemGroupName")
                        .HasColumnName("item_group_name")
                        .HasColumnType("text");

                    b.Property<int>("LabelId")
                        .HasColumnName("label_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("ObjectStatus")
                        .HasColumnName("object_status")
                        .HasColumnType("integer");

                    b.Property<int>("OrgId")
                        .HasColumnName("org_id")
                        .HasColumnType("integer");

                    b.Property<string>("OrgName")
                        .HasColumnName("org_name")
                        .HasColumnType("text");

                    b.Property<int>("ProductFormId")
                        .HasColumnName("prod_form_id")
                        .HasColumnType("integer");

                    b.Property<int>("ProductGroupId")
                        .HasColumnName("product_group_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Temperature")
                        .HasColumnName("temperature")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("items");
                });

            modelBuilder.Entity("qcs_product.API.Models.ItemBatchNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BatchNumber")
                        .HasColumnName("batch_number")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnName("expire_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id")
                        .HasColumnType("integer");

                    b.Property<int>("ObjectStatus")
                        .HasColumnName("object_status")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("integer")
                        .HasMaxLength(20);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("item_batch_number");
                });

            modelBuilder.Entity("qcs_product.API.Models.ItemDosageForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ItemDosageFormCode")
                        .HasColumnName("item_dosage_form_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ItemDosageFormName")
                        .HasColumnName("item_dosage_form_name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("item_dosage_form");
                });

            modelBuilder.Entity("qcs_product.API.Models.ItemGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ItemGroupCode")
                        .HasColumnName("item_group_code")
                        .HasColumnType("text");

                    b.Property<string>("ItemGroupName")
                        .HasColumnName("item_group_name")
                        .HasColumnType("text");

                    b.Property<int>("ObjectStatus")
                        .HasColumnName("object_status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("item_group");
                });

            modelBuilder.Entity("qcs_product.API.Models.ItemPresentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ItemPresentationCode")
                        .HasColumnName("item_presentation_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ItemPresentationName")
                        .HasColumnName("item_presentation_name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("item_presentation");
                });

            modelBuilder.Entity("qcs_product.API.Models.ItemProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ItemProductGroupCode")
                        .HasColumnName("item_product_group_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ItemProductGroupName")
                        .HasColumnName("item_product_group_name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("item_product_group");
                });

            modelBuilder.Entity("qcs_product.API.Models.Microflora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MicrobaCategory")
                        .HasColumnName("microba_category")
                        .HasColumnType("text");

                    b.Property<string>("MicrobaId")
                        .HasColumnName("microba_id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("ObjectStatus")
                        .HasColumnName("object_status")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("microflora");
                });

            modelBuilder.Entity("qcs_product.API.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BIOHROrganizationId")
                        .HasColumnName("biohr_organization_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("OrgCode")
                        .HasColumnName("org_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("organization");
                });

            modelBuilder.Entity("qcs_product.API.Models.Personal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Nik")
                        .HasColumnName("nik")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<string>("NoHandphone")
                        .HasColumnName("no_handphone")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("OrgId")
                        .HasColumnName("org_id")
                        .HasColumnType("integer");

                    b.Property<string>("Pin")
                        .HasColumnName("pin")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("PosId")
                        .HasColumnName("pos_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("personal");
                });

            modelBuilder.Entity("qcs_product.API.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PosCode")
                        .HasColumnName("pos_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("position");
                });

            modelBuilder.Entity("qcs_product.API.Models.ProductForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FormCode")
                        .HasColumnName("form_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("product_forms");
                });

            modelBuilder.Entity("qcs_product.API.Models.ProductProductionPhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ProductProdPhaseCode")
                        .HasColumnName("product_prod_phase_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("text");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("product_production_phases");
                });

            modelBuilder.Entity("qcs_product.API.Models.ProductProductionPhasesPersonel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("PersonelName")
                        .IsRequired()
                        .HasColumnName("personel_name")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("PersonelNik")
                        .IsRequired()
                        .HasColumnName("personel_nik")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int>("ProductProductionPhasesId")
                        .HasColumnName("product_production_phases_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("product_production_phases_personel");
                });

            modelBuilder.Entity("qcs_product.API.Models.ProductTestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("SampleAmountCount")
                        .HasColumnName("sample_amount_count")
                        .HasColumnType("integer");

                    b.Property<string>("SampleAmountPresentation")
                        .HasColumnName("sample_amount_presentation")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("SampleAmountUnit")
                        .HasColumnName("sample_amount_unit")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double>("SampleAmountVolume")
                        .HasColumnName("sample_amount_volume")
                        .HasColumnType("double precision");

                    b.Property<int>("TestTypeId")
                        .HasColumnName("test_type_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("product_test_types");
                });

            modelBuilder.Entity("qcs_product.API.Models.ProductionPhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ProdPhaseCode")
                        .HasColumnName("prod_phase_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("production_phases");
                });

            modelBuilder.Entity("qcs_product.API.Models.Purpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("purposes");
                });

            modelBuilder.Entity("qcs_product.API.Models.PurposesPersonel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Nik")
                        .IsRequired()
                        .HasColumnName("nik")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PersonelName")
                        .IsRequired()
                        .HasColumnName("personel_name")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<int>("PurposeId")
                        .HasColumnName("purpose_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("purposes_personel");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcPersonel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Initial")
                        .HasColumnName("initial")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("PersonelCode4")
                        .HasColumnName("personel_code4")
                        .HasColumnType("text");

                    b.Property<string>("PersonelCode8")
                        .HasColumnName("personel_code8")
                        .HasColumnType("text");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("qc_personel");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AddSampleLayoutType")
                        .HasColumnName("add_sample_layout_type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<int?>("IsInputForm")
                        .HasColumnName("is_input_form")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<int?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.Property<int?>("PurposeId")
                        .HasColumnName("purpose_id")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying");

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("qc_process");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcRequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("qc_request_type");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AttchmentFile")
                        .HasColumnName("attchment_file")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("SampleId")
                        .HasColumnName("qc_sample_id")
                        .HasColumnType("integer");

                    b.Property<string>("TestVariableConclusion")
                        .HasColumnName("test_variabel_conclusion")
                        .HasColumnType("text");

                    b.Property<int?>("TestVariableId")
                        .HasColumnName("test_variabel_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("qc_result");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AttchmentFile")
                        .HasColumnName("attchment_file")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("GradeRoomId")
                        .HasColumnName("grade_room_id")
                        .HasColumnType("integer");

                    b.Property<string>("GradeRoomName")
                        .HasColumnName("grade_room_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnName("is_default")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ParticleVolume")
                        .HasColumnName("particle_volume")
                        .HasColumnType("numeric");

                    b.Property<int?>("PersonalId")
                        .HasColumnName("personal_id")
                        .HasColumnType("integer");

                    b.Property<string>("PersonalInitial")
                        .HasColumnName("personal_initial")
                        .HasColumnType("text");

                    b.Property<string>("PersonalName")
                        .HasColumnName("personal_name")
                        .HasColumnType("text");

                    b.Property<int>("QcSamplingId")
                        .HasColumnName("qc_sampling_id")
                        .HasColumnType("integer");

                    b.Property<int?>("QcSamplingMaterialsId")
                        .HasColumnName("qc_sampling_materials_id")
                        .HasColumnType("integer");

                    b.Property<int?>("QcSamplingToolsId")
                        .HasColumnName("qc_sampling_tools_id")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewQaNote")
                        .HasColumnName("review_qa_note")
                        .HasColumnType("text");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("SampleSequence")
                        .HasColumnName("sample_sequence")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SamplingDateTimeFrom")
                        .HasColumnName("sampling_date_time_from")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("SamplingDateTimeTo")
                        .HasColumnName("sampling_date_time_to")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SamplingPointCode")
                        .HasColumnName("sampling_point_code")
                        .HasColumnType("text");

                    b.Property<int?>("SamplingPointId")
                        .HasColumnName("sampling_point_id")
                        .HasColumnType("integer");

                    b.Property<int>("TestParamId")
                        .HasColumnName("test_param_id")
                        .HasColumnType("integer");

                    b.Property<string>("TestParamName")
                        .HasColumnName("test_param_name")
                        .HasColumnType("text");

                    b.Property<int?>("TestScenarioId")
                        .HasColumnName("test_scenario_id")
                        .HasColumnType("integer");

                    b.Property<string>("ToolCode")
                        .HasColumnName("tool_code")
                        .HasColumnType("text");

                    b.Property<int?>("ToolGroupId")
                        .HasColumnName("tool_gorup_id")
                        .HasColumnType("integer");

                    b.Property<string>("ToolGroupLabel")
                        .HasColumnName("tool_group_label")
                        .HasColumnType("text");

                    b.Property<string>("ToolGroupName")
                        .HasColumnName("tool_group_name")
                        .HasColumnType("text");

                    b.Property<int?>("ToolId")
                        .HasColumnName("tool_id")
                        .HasColumnType("integer");

                    b.Property<string>("ToolName")
                        .HasColumnName("tool_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("QcSamplingId");

                    b.ToTable("qc_sample");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcSampling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AttchmentFile")
                        .HasColumnName("attchment_file")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("text");

                    b.Property<string>("ProductDataLogger")
                        .HasColumnName("product_data_logger")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProductDate")
                        .HasColumnName("product_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ProductMethodId")
                        .HasColumnName("product_method_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ProductShipmentDate")
                        .HasColumnName("product_shipment_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProductShipmentTemperature")
                        .HasColumnName("product_shipment_temperature")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReceiptDate")
                        .HasColumnName("receipt_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RequestQcsId")
                        .HasColumnName("request_qcs_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("SamplingDateFrom")
                        .HasColumnName("sampling_date_from")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("SamplingDateTo")
                        .HasColumnName("sampling_date_to")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SamplingTypeId")
                        .HasColumnName("sampling_type_id")
                        .HasColumnType("integer");

                    b.Property<string>("SamplingTypeName")
                        .HasColumnName("sampling_type_name")
                        .HasColumnType("text");

                    b.Property<string>("ShipmentApprovalBy")
                        .HasColumnName("shipment_approval_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ShipmentApprovalDate")
                        .HasColumnName("shipment_approval_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ShipmentNote")
                        .HasColumnName("shipment_note")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("WorkflowStatus")
                        .HasColumnName("workflow_status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("qc_sampling");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcSamplingAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AttachmentFileLink")
                        .HasColumnName("attachment_file_link")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentFileName")
                        .HasColumnName("attachment_file_name")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentStorageName")
                        .HasColumnName("attachment_storage_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("QcSamplingId")
                        .HasColumnName("qc_sampling_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("QcSamplingId");

                    b.ToTable("qc_sampling_attachment");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcSamplingMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnName("expire_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ItemBatchId")
                        .HasColumnName("item_batch_id")
                        .HasColumnType("integer");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id")
                        .HasColumnType("integer");

                    b.Property<string>("ItemName")
                        .HasColumnName("item_name")
                        .HasColumnType("text");

                    b.Property<string>("NoBatch")
                        .HasColumnName("no_batch")
                        .HasColumnType("text");

                    b.Property<int>("QcSamplingId")
                        .HasColumnName("qc_sampling_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("QcSamplingId");

                    b.ToTable("qc_sampling_material");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcSamplingPersonel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("PersonelName")
                        .IsRequired()
                        .HasColumnName("personel_name")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("PersonelNik")
                        .IsRequired()
                        .HasColumnName("personel_nik")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("ProductProductionPhasesPersonelId")
                        .HasColumnName("product_production_phases_personel_id")
                        .HasColumnType("integer");

                    b.Property<int>("QcSamplingId")
                        .HasColumnName("qc_sampling_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("qc_sampling_personel");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcSamplingShipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("FromOrganizationId")
                        .HasColumnName("from_organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("FromOrganizationName")
                        .HasColumnName("from_organization_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsLateTransfer")
                        .HasColumnName("is_late_transfer")
                        .HasColumnType("boolean");

                    b.Property<string>("NoRequest")
                        .HasColumnName("no_request")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<int>("QcSamplingId")
                        .HasColumnName("qc_sampling_id")
                        .HasColumnType("integer");

                    b.Property<string>("QrCode")
                        .HasColumnName("qr_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer")
                        .HasMaxLength(10);

                    b.Property<int>("TestParamId")
                        .HasColumnName("test_param_id")
                        .HasColumnType("integer");

                    b.Property<string>("TestParamName")
                        .HasColumnName("test_param_name")
                        .HasColumnType("text");

                    b.Property<int?>("ToOrganizationId")
                        .HasColumnName("to_organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("ToOrganizationName")
                        .HasColumnName("to_organization_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("qc_sampling_shipment");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcSamplingShipmentTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("OrganizationName")
                        .HasColumnName("organization_name")
                        .HasColumnType("text");

                    b.Property<int?>("QcSamplingShipmentId")
                        .HasColumnName("qc_sampling_shipment_id")
                        .HasColumnType("integer");

                    b.Property<string>("QrCode")
                        .HasColumnName("qr_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("text");

                    b.Property<string>("UserNik")
                        .HasColumnName("user_nik")
                        .HasColumnType("text");

                    b.Property<DateTime?>("processAt")
                        .HasColumnName("processed_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("QcSamplingShipmentId");

                    b.ToTable("qc_sampling_shipment_tracker");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcSamplingTools", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EdCalibration")
                        .HasColumnName("ed_calibration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EdValidation")
                        .HasColumnName("ed_validation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("QcSamplingId")
                        .HasColumnName("qc_sampling_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ToolCode")
                        .HasColumnName("tool_code")
                        .HasColumnType("text");

                    b.Property<int>("ToolGroupId")
                        .HasColumnName("tool_group_id")
                        .HasColumnType("integer");

                    b.Property<string>("ToolGroupLabel")
                        .HasColumnName("tool_group_label")
                        .HasColumnType("text");

                    b.Property<string>("ToolGroupName")
                        .HasColumnName("tool_group_name")
                        .HasColumnType("text");

                    b.Property<int>("ToolId")
                        .HasColumnName("tool_id")
                        .HasColumnType("integer");

                    b.Property<string>("ToolName")
                        .HasColumnName("tool_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("QcSamplingId");

                    b.ToTable("qc_sampling_tools");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcSamplingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("qc_sampling_type");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcTransactionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PersonelName")
                        .HasColumnName("personel_name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PersonelNik")
                        .HasColumnName("personel_nik")
                        .HasColumnType("text");

                    b.Property<string>("PersonelPairingName")
                        .HasColumnName("personel_pairing_name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PersonelPairingNik")
                        .HasColumnName("personel_pairing_nik")
                        .HasColumnType("text");

                    b.Property<int>("QcProcessId")
                        .HasColumnName("qc_process_id")
                        .HasColumnType("integer");

                    b.Property<string>("QcProcessName")
                        .HasColumnName("qc_process_name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<int>("StatusProses")
                        .HasColumnName("status_proses")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TestDate")
                        .HasColumnName("test_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("WorkflowStatus")
                        .HasColumnName("workflow_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("qc_transaction_group");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcTransactionGroupFormMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("DefaultPackageQty")
                        .HasColumnName("default_package_qty")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DefaultQty")
                        .HasColumnName("default_qty")
                        .HasColumnType("numeric");

                    b.Property<string>("GroupName")
                        .HasColumnName("group_name")
                        .HasColumnType("text");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("QcProcessId")
                        .HasColumnName("qc_process_id")
                        .HasColumnType("integer");

                    b.Property<int>("QcTransactionGroupProcessId")
                        .HasColumnName("qc_transaction_group_process_id")
                        .HasColumnType("integer");

                    b.Property<int>("QcTransactionGroupSectionId")
                        .HasColumnName("qc_transaction_group_section_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("integer");

                    b.Property<int>("Uom")
                        .HasColumnName("uom")
                        .HasColumnType("integer");

                    b.Property<int>("UomPackage")
                        .HasColumnName("uom_package")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("qc_transaction_group_form_material");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcTransactionGroupFormParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DefaultValue")
                        .HasColumnName("default_value")
                        .HasColumnType("text");

                    b.Property<int>("FormProcedureId")
                        .HasColumnName("form_procedure_id")
                        .HasColumnType("integer");

                    b.Property<int>("InputType")
                        .HasColumnName("input_type")
                        .HasColumnType("integer");

                    b.Property<bool>("IsForAllSample")
                        .HasColumnName("is_for_all_sample")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsResult")
                        .HasColumnName("is_result")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<bool>("NeedAttachment")
                        .HasColumnName("need_attachment")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("text");

                    b.Property<int>("QcTransactionGroupFormProcedureId")
                        .HasColumnName("qc_transaction_group_form_procedure_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("integer");

                    b.Property<int?>("ThresholdOperator")
                        .HasColumnName("threshold_operator")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ThresholdValue")
                        .HasColumnName("threshold_value")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ThresholdValueFrom")
                        .HasColumnName("threshold_value_from")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ThresholdValueTo")
                        .HasColumnName("threshold_value_to")
                        .HasColumnType("numeric");

                    b.Property<int?>("Uom")
                        .HasColumnName("uom")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("QcTransactionGroupFormProcedureId");

                    b.ToTable("qc_transaction_group_form_parameter");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcTransactionGroupFormProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<int>("FormProcedureId")
                        .HasColumnName("form_procedure_id")
                        .HasColumnType("integer");

                    b.Property<int>("QcTransactionGroupProcessId")
                        .HasColumnName("qc_transaction_group_process_id")
                        .HasColumnType("integer");

                    b.Property<int>("QcTransactionGroupSectionId")
                        .HasColumnName("qc_transaction_group_section_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("QcTransactionGroupProcessId");

                    b.ToTable("qc_transaction_group_form_procedure");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcTransactionGroupFormSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("QcProcessId")
                        .HasColumnName("qc_process_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("SectionId")
                        .HasColumnName("section_id")
                        .HasColumnType("integer");

                    b.Property<int>("SectionTypeId")
                        .HasColumnName("section_type_id")
                        .HasColumnType("integer");

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("qc_transaction_group_form_section");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcTransactionGroupFormTool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ItemId")
                        .HasColumnName("item_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("QcProcessId")
                        .HasColumnName("qc_process_id")
                        .HasColumnType("integer");

                    b.Property<int>("QcTransactionGroupProcessId")
                        .HasColumnName("qc_transaction_group_process_id")
                        .HasColumnType("integer");

                    b.Property<int>("QcTransactionGroupSectionId")
                        .HasColumnName("qc_transaction_group_section_id")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("numeric");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("integer");

                    b.Property<int>("ToolId")
                        .HasColumnName("tools_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("QcTransactionGroupProcessId");

                    b.ToTable("qc_transaction_group_form_tool");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcTransactionGroupProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("IsInputForm")
                        .HasColumnName("is_input_form")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.Property<int>("QcProcessId")
                        .HasColumnName("qc_process_id")
                        .HasColumnType("integer");

                    b.Property<int>("QcTransactionGroupId")
                        .HasColumnName("qc_transaction_group_id")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("QcTransactionGroupId");

                    b.ToTable("qc_transaction_group_process");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcTransactionGroupSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("QcSampleId")
                        .HasColumnName("qc_sample_id")
                        .HasColumnType("integer");

                    b.Property<int?>("QcSamplingId")
                        .HasColumnName("qc_sampling_id")
                        .HasColumnType("integer");

                    b.Property<int>("QcTransactionGroupId")
                        .HasColumnName("qc_transaction_group_id")
                        .HasColumnType("integer");

                    b.Property<int?>("QcTransactionSamplingId")
                        .HasColumnName("qc_transaction_sampling_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("QcTransactionGroupId");

                    b.ToTable("qc_transaction_sample");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcTransactionGroupSampleValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AttchmentFile")
                        .HasColumnName("attachment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("QcTransactionGroupFormParameterId")
                        .HasColumnName("qc_transaction_group_form_parameter_id")
                        .HasColumnType("integer");

                    b.Property<int?>("QcTransactionGroupFromMaterialId")
                        .HasColumnName("qc_transaction_group_form_material_id")
                        .HasColumnType("integer");

                    b.Property<int?>("QcTransactionGroupFromToolId")
                        .HasColumnName("qc_transaction_group_form_tool_id")
                        .HasColumnType("integer");

                    b.Property<int>("QcTransactionSampleId")
                        .HasColumnName("qc_transaction_sample_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QcTransactionGroupFormParameterId");

                    b.ToTable("qc_transaction_group_sample_value");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcTransactionGroupSampling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("QcSamplingId")
                        .HasColumnName("qc_sampling_id")
                        .HasColumnType("integer");

                    b.Property<int>("QcTransactionGroupId")
                        .HasColumnName("qc_transaction_group_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("QcTransactionGroupId");

                    b.ToTable("qc_transaction_sampling");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcTransactionGroupValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AttchmentFile")
                        .HasColumnName("attachment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("QcTransactionGroupFormMaterialId")
                        .HasColumnName("qc_transaction_group_form_material_id")
                        .HasColumnType("integer");

                    b.Property<int>("QcTransactionGroupFormParameterId")
                        .HasColumnName("qc_transaction_group_form_parameter_id")
                        .HasColumnType("integer");

                    b.Property<int?>("QcTransactionGroupFormToolId")
                        .HasColumnName("qc_transaction_group_form_tool_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QcTransactionGroupFormParameterId");

                    b.ToTable("qc_transaction_group_value");
                });

            modelBuilder.Entity("qcs_product.API.Models.RelEmProdPhaseToRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<int>("EmPhaseId")
                        .HasColumnName("em_prod_phase_id")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("rel_em_prod_phase_to_room");
                });

            modelBuilder.Entity("qcs_product.API.Models.RelGradeRoomScenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("GradeRoomId")
                        .HasColumnName("grade_room_id")
                        .HasColumnType("integer");

                    b.Property<int>("TestScenarioId")
                        .HasColumnName("test_scenario_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("rel_grade_room_scenario");
                });

            modelBuilder.Entity("qcs_product.API.Models.RelItemTestScenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id")
                        .HasColumnType("integer");

                    b.Property<int>("TestScenarioId")
                        .HasColumnName("test_scenario_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("rel_item_test_scenario");
                });

            modelBuilder.Entity("qcs_product.API.Models.RelItemsItemPresentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id")
                        .HasColumnType("integer")
                        .HasMaxLength(20);

                    b.Property<int>("ItemPresentationId")
                        .HasColumnName("item_presentation_id")
                        .HasColumnType("integer")
                        .HasMaxLength(200);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("rel_items_item_presentation");
                });

            modelBuilder.Entity("qcs_product.API.Models.RelProductProdPhaseToRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ProductProductionPhasesId")
                        .HasColumnName("product_production_phases_id")
                        .HasColumnType("integer")
                        .HasMaxLength(20);

                    b.Property<int>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("integer")
                        .HasMaxLength(200);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("rel_product_prod_phase_to_room");
                });

            modelBuilder.Entity("qcs_product.API.Models.RelRoomSampling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("RoomPurposeId")
                        .HasColumnName("room_purpose_id")
                        .HasColumnType("integer");

                    b.Property<int>("SamplingPointId")
                        .HasColumnName("sampling_poin_id")
                        .HasColumnType("integer");

                    b.Property<string>("ScenarioLabel")
                        .HasColumnName("scenario_label")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("rel_room_sampling_point");
                });

            modelBuilder.Entity("qcs_product.API.Models.RelSamplingPurposeToolGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("PurposeId")
                        .HasColumnName("purpose_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ToolGroupId")
                        .HasColumnName("tool_group_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("rel_sampling_purpose_tool_group");
                });

            modelBuilder.Entity("qcs_product.API.Models.RelSamplingTestParam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("SamplingPointId")
                        .HasColumnName("sampling_point_id")
                        .HasColumnType("integer");

                    b.Property<int>("TestScenarioParamId")
                        .HasColumnName("test_scenario_param_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("rel_sampling_test_param");
                });

            modelBuilder.Entity("qcs_product.API.Models.RelSamplingTool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("SamplingPointId")
                        .HasColumnName("sampling_poin_id")
                        .HasColumnType("integer");

                    b.Property<string>("ScenarioLabel")
                        .HasColumnName("scenario_label")
                        .HasColumnType("text");

                    b.Property<int?>("ToolPurposeId")
                        .HasColumnName("tool_purpose_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("rel_sampling_tool");
                });

            modelBuilder.Entity("qcs_product.API.Models.RelTestScenarioParam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("TestParameterId")
                        .HasColumnName("test_parameter_id")
                        .HasColumnType("integer");

                    b.Property<int>("TestScenarioId")
                        .HasColumnName("test_scenario_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("rel_test_scenario_param");
                });

            modelBuilder.Entity("qcs_product.API.Models.RequestAhu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AhuCode")
                        .HasColumnName("ahu_code")
                        .HasColumnType("text");

                    b.Property<int>("AhuId")
                        .HasColumnName("ahu_id")
                        .HasColumnType("integer");

                    b.Property<string>("AhuName")
                        .HasColumnName("ahu_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<int>("QcRequestId")
                        .HasColumnName("qc_request_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("request_ahu");
                });

            modelBuilder.Entity("qcs_product.API.Models.RequestGroupRoomPurpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<int>("RequestQcsId")
                        .HasColumnName("request_id")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomPurposeId")
                        .HasColumnName("room_purpose_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("request_group_room_purpose");
                });

            modelBuilder.Entity("qcs_product.API.Models.RequestGroupToolPurpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<int>("RequestQcsId")
                        .HasColumnName("request_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying");

                    b.Property<int?>("ToolPurposeId")
                        .HasColumnName("tool_purpose_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("request_group_tool_purpose");
                });

            modelBuilder.Entity("qcs_product.API.Models.RequestPurpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("PurposeCode")
                        .HasColumnName("purpose_code")
                        .HasColumnType("text");

                    b.Property<int>("PurposeId")
                        .HasColumnName("purpose_id")
                        .HasColumnType("integer");

                    b.Property<string>("PurposeName")
                        .HasColumnName("purpose_name")
                        .HasColumnType("text");

                    b.Property<int>("QcRequestId")
                        .HasColumnName("qc_request_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("request_purposes");
                });

            modelBuilder.Entity("qcs_product.API.Models.RequestQcs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Conclusion")
                        .HasColumnName("conclusion")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EmPhaseId")
                        .HasColumnName("em_phase_id")
                        .HasColumnType("integer");

                    b.Property<string>("EmPhaseName")
                        .HasColumnName("em_phase_name")
                        .HasColumnType("text");

                    b.Property<int?>("EmRoomGradeId")
                        .HasColumnName("em_room_grade_id")
                        .HasColumnType("integer");

                    b.Property<string>("EmRoomGradeName")
                        .HasColumnName("em_room_grade_name")
                        .HasColumnType("text");

                    b.Property<int?>("EmRoomId")
                        .HasColumnName("em_room_id")
                        .HasColumnType("integer");

                    b.Property<string>("EmRoomName")
                        .HasColumnName("em_room_name")
                        .HasColumnType("text");

                    b.Property<string>("FacilityCode")
                        .HasColumnName("facility_code")
                        .HasColumnType("text");

                    b.Property<int?>("FacilityId")
                        .HasColumnName("facility_id")
                        .HasColumnType("integer");

                    b.Property<string>("FacilityName")
                        .HasColumnName("facility_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsFromBulkRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_from_bulk_request")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsNoBatchEditable")
                        .HasColumnName("is_no_batch_editable")
                        .HasColumnType("boolean");

                    b.Property<int?>("ItemId")
                        .HasColumnName("item_id")
                        .HasColumnType("integer");

                    b.Property<string>("ItemName")
                        .HasColumnName("item_name")
                        .HasColumnType("text");

                    b.Property<string>("ItemTemperature")
                        .HasColumnName("item_temperature")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Location")
                        .HasColumnName("location")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NoBatch")
                        .HasColumnName("no_batch")
                        .HasColumnType("text");

                    b.Property<string>("NoDeviation")
                        .HasColumnName("dev_number")
                        .HasColumnType("text");

                    b.Property<string>("NoRequest")
                        .HasColumnName("no_request")
                        .HasColumnType("text");

                    b.Property<int?>("OrgId")
                        .HasColumnName("org_id")
                        .HasColumnType("integer");

                    b.Property<string>("OrgName")
                        .HasColumnName("org_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnName("process_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ProcessId")
                        .HasColumnName("process_id")
                        .HasColumnType("integer");

                    b.Property<string>("ProcessName")
                        .HasColumnName("process_name")
                        .HasColumnType("text");

                    b.Property<int?>("ProductFormId")
                        .HasColumnName("product_form_id")
                        .HasColumnType("integer");

                    b.Property<string>("ProductFormName")
                        .HasColumnName("product_form_name")
                        .HasColumnType("text");

                    b.Property<int?>("ProductGroupId")
                        .HasColumnName("product_group_id")
                        .HasColumnType("integer");

                    b.Property<string>("ProductGroupName")
                        .HasColumnName("product_group_name")
                        .HasColumnType("text");

                    b.Property<int?>("ProductPhaseId")
                        .HasColumnName("product_phase_id")
                        .HasColumnType("integer");

                    b.Property<string>("ProductPhaseName")
                        .HasColumnName("product_phase_name")
                        .HasColumnType("text");

                    b.Property<int?>("ProductPresentationId")
                        .HasColumnName("product_presentation_id")
                        .HasColumnType("integer");

                    b.Property<string>("ProductPresentationName")
                        .HasColumnName("product_presentation_name")
                        .HasColumnType("text");

                    b.Property<string>("ProductTemperature")
                        .HasColumnName("product_temperature")
                        .HasColumnType("text");

                    b.Property<int?>("PurposeId")
                        .HasColumnName("purpose_id")
                        .HasColumnType("integer");

                    b.Property<string>("PurposeName")
                        .HasColumnName("purpose_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReceiptDate")
                        .HasColumnName("receipt_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ReceiptDateKabag")
                        .HasColumnName("receipt_date_kabag")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ReceiptDateQA")
                        .HasColumnName("receipt_date_qa")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<int?>("StorageTemperatureId")
                        .HasColumnName("storage_temperature_id")
                        .HasColumnType("integer");

                    b.Property<string>("StorageTemperatureName")
                        .HasColumnName("storage_temperature_name")
                        .HasColumnType("text");

                    b.Property<int?>("TestScenarioId")
                        .HasColumnName("test_scenario_id")
                        .HasColumnType("integer");

                    b.Property<string>("TestScenarioLabel")
                        .HasColumnName("test_scenario_label")
                        .HasColumnType("text");

                    b.Property<string>("TestScenarioName")
                        .HasColumnName("test_scenario_name")
                        .HasColumnType("text");

                    b.Property<int?>("TypeFormId")
                        .HasColumnName("type_form_id")
                        .HasColumnType("integer");

                    b.Property<string>("TypeFormName")
                        .HasColumnName("type_form_name")
                        .HasColumnType("text");

                    b.Property<string>("TypeRequest")
                        .HasColumnName("type_request")
                        .HasColumnType("text");

                    b.Property<int>("TypeRequestId")
                        .HasColumnName("type_request_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("WorkflowStatus")
                        .HasColumnName("workflow_status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("request_qcs");
                });

            modelBuilder.Entity("qcs_product.API.Models.RequestRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AhuCode")
                        .HasColumnName("ahu_code")
                        .HasColumnType("text");

                    b.Property<int?>("AhuId")
                        .HasColumnName("ahu_id")
                        .HasColumnType("integer");

                    b.Property<string>("AhuName")
                        .HasColumnName("ahu_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("GradeRoomCode")
                        .HasColumnName("grade_room_code")
                        .HasColumnType("text");

                    b.Property<int?>("GradeRoomId")
                        .HasColumnName("grade_room_id")
                        .HasColumnType("integer");

                    b.Property<string>("GradeRoomName")
                        .HasColumnName("grade_room_name")
                        .HasColumnType("text");

                    b.Property<int>("QcRequestId")
                        .HasColumnName("qc_request_id")
                        .HasColumnType("integer");

                    b.Property<string>("RoomCode")
                        .HasColumnName("room_code")
                        .HasColumnType("text");

                    b.Property<int>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("integer");

                    b.Property<string>("RoomName")
                        .HasColumnName("room_name")
                        .HasColumnType("text");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("TestScenarioId")
                        .HasColumnName("test_scenario_id")
                        .HasColumnType("integer");

                    b.Property<string>("TestScenarioLabel")
                        .HasColumnName("test_scenario_label")
                        .HasColumnType("text");

                    b.Property<string>("TestScenarioName")
                        .HasColumnName("test_scenario_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("request_room");
                });

            modelBuilder.Entity("qcs_product.API.Models.RequestSampling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TypeRequestId")
                        .HasColumnName("type_request_id")
                        .HasColumnType("integer");

                    b.Property<int>("TypeSamplingId")
                        .HasColumnName("type_sampling_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("qc_request_sampling");
                });

            modelBuilder.Entity("qcs_product.API.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Ahu")
                        .HasColumnName("ahu")
                        .HasColumnType("integer");

                    b.Property<int?>("AirChangeOperator")
                        .HasColumnName("air_change_operator")
                        .HasColumnType("integer");

                    b.Property<decimal?>("AirChangeValue")
                        .HasColumnName("air_change_value")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AirChangeValueFrom")
                        .HasColumnName("air_change_value_from")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AirChangeValueTo")
                        .HasColumnName("air_change_value_to")
                        .HasColumnType("numeric");

                    b.Property<int?>("Area")
                        .HasColumnName("area")
                        .HasColumnType("integer");

                    b.Property<int>("BuildingId")
                        .HasColumnName("building_id")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Floor")
                        .HasColumnName("floor")
                        .HasColumnType("character varying");

                    b.Property<int>("GradeRoomId")
                        .HasColumnName("grade_room_id")
                        .HasColumnType("integer");

                    b.Property<int?>("HumidityOperator")
                        .HasColumnName("humidity_operator")
                        .HasColumnType("integer");

                    b.Property<decimal?>("HumidityValue")
                        .HasColumnName("humidity_value")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("HumidityValueFrom")
                        .HasColumnName("humidity_value_from")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("HumidityValueTo")
                        .HasColumnName("humidity_value_to")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("ObjectStatus")
                        .HasColumnName("object_status")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("PosId")
                        .HasColumnName("pos_id")
                        .HasColumnType("text");

                    b.Property<int?>("PressureOperator")
                        .HasColumnName("pressure_operator")
                        .HasColumnType("integer");

                    b.Property<decimal?>("PressureValue")
                        .HasColumnName("pressure_value")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PressureValueFrom")
                        .HasColumnName("pressure_value_from")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PressureValueTo")
                        .HasColumnName("pressure_value_to")
                        .HasColumnType("numeric");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("text");

                    b.Property<int?>("TemperatureOperator")
                        .HasColumnName("temperature_operator")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TemperatureValue")
                        .HasColumnName("temperature_value")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TemperatureValueFrom")
                        .HasColumnName("temperature_value_from")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TemperatureValueTo")
                        .HasColumnName("temperature_value_to")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("room");
                });

            modelBuilder.Entity("qcs_product.API.Models.RoomFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<int>("FacilityId")
                        .HasColumnName("facility_id")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("facility_room");
                });

            modelBuilder.Entity("qcs_product.API.Models.RoomPurpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<int>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("room_purpose");
                });

            modelBuilder.Entity("qcs_product.API.Models.RoomPurposeToMasterPurpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<int>("PurposeId")
                        .HasColumnName("purpose_id")
                        .HasColumnType("integer");

                    b.Property<int>("RoomPurposeId")
                        .HasColumnName("room_purpose_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("room_purpose_to_master_purpose");
                });

            modelBuilder.Entity("qcs_product.API.Models.RoomSamplingPointLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AttachmentFile")
                        .HasColumnName("attachment_file")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FileName")
                        .HasColumnName("file_name")
                        .HasColumnType("text");

                    b.Property<string>("FileType")
                        .HasColumnName("file_type")
                        .HasColumnType("text");

                    b.Property<int>("RoomPurposeId")
                        .HasColumnName("room_purpose_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("room_sampling_point_layout");
                });

            modelBuilder.Entity("qcs_product.API.Models.SamplingPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("integer");

                    b.Property<int?>("ToolId")
                        .HasColumnName("tool_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("sampling_point");
                });

            modelBuilder.Entity("qcs_product.API.Models.SamplingTestParam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("SamplingPointId")
                        .HasColumnName("sampling_point_id")
                        .HasColumnType("integer");

                    b.Property<int>("TestParameterId")
                        .HasColumnName("test_parameter_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("sampling_test_parameter");
                });

            modelBuilder.Entity("qcs_product.API.Models.StorageTemperature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("text");

                    b.Property<double>("TresholdMax")
                        .HasColumnName("treshold_max")
                        .HasColumnType("double precision");

                    b.Property<double>("TresholdMin")
                        .HasColumnName("treshold_min")
                        .HasColumnType("double precision");

                    b.Property<string>("TresholdOperator")
                        .HasColumnName("treshold_operator")
                        .HasColumnType("text");

                    b.Property<double>("TresholdValue")
                        .HasColumnName("treshold_value")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("storage_temperature");
                });

            modelBuilder.Entity("qcs_product.API.Models.TestParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("OrgId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int?>("QcProcessId")
                        .HasColumnName("qc_process_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("text");

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("text");

                    b.Property<int>("TestGroupId")
                        .HasColumnName("test_group_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("test_parameter");
                });

            modelBuilder.Entity("qcs_product.API.Models.TestScenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Label")
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("test_scenario");
                });

            modelBuilder.Entity("qcs_product.API.Models.TestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("OrgId")
                        .HasColumnName("org_id")
                        .HasColumnType("integer");

                    b.Property<string>("OrgName")
                        .HasColumnName("org_name")
                        .HasColumnType("text");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("TestTypeCode")
                        .HasColumnName("test_type_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("test_types");
                });

            modelBuilder.Entity("qcs_product.API.Models.TestTypeQcs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("OrgId")
                        .HasColumnName("org_id")
                        .HasColumnType("integer");

                    b.Property<string>("OrgName")
                        .HasColumnName("org_name")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<int>("RequestQcsId")
                        .HasColumnName("request_qcs_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("SampleAmountCount")
                        .HasColumnName("sample_amount_count")
                        .HasColumnType("integer");

                    b.Property<string>("SampleAmountPresentation")
                        .HasColumnName("sample_amount_presentation")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("SampleAmountUnit")
                        .HasColumnName("sample_amount_unit")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double>("SampleAmountVolume")
                        .HasColumnName("sample_amount_volume")
                        .HasColumnType("double precision");

                    b.Property<int>("TestParameterId")
                        .HasColumnName("test_parameter_id")
                        .HasColumnType("integer");

                    b.Property<string>("TestParameterName")
                        .HasColumnName("test_parameter_name")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<int>("TestTypeId")
                        .HasColumnName("test_type_id")
                        .HasColumnType("integer");

                    b.Property<string>("TestTypeName")
                        .HasColumnName("test_type_name")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("RequestQcsId");

                    b.ToTable("product_test_type_qcs");
                });

            modelBuilder.Entity("qcs_product.API.Models.TestVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("text");

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("integer");

                    b.Property<int>("TestParameterId")
                        .HasColumnName("test_parameter_id")
                        .HasColumnType("integer");

                    b.Property<long?>("TresholdMax")
                        .HasColumnName("threshold_value_from")
                        .HasColumnType("bigint");

                    b.Property<long?>("TresholdMin")
                        .HasColumnName("threshold_value_to")
                        .HasColumnType("bigint");

                    b.Property<int>("TresholdOperator")
                        .HasColumnName("treshold_operator")
                        .HasColumnType("integer");

                    b.Property<long?>("TresholdValue")
                        .HasColumnName("treshold_value")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("VariableName")
                        .HasColumnName("variable_name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("test_variable");
                });

            modelBuilder.Entity("qcs_product.API.Models.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("FacilityId")
                        .HasColumnName("facility_id")
                        .HasColumnType("integer");

                    b.Property<int>("GradeRoomId")
                        .HasColumnName("grade_room_id")
                        .HasColumnType("integer");

                    b.Property<int?>("MachineId")
                        .HasColumnName("machine_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("ObjectStatus")
                        .HasColumnName("object_status")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SerialNumberId")
                        .HasColumnName("serial_number_id")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ToolCode")
                        .HasColumnName("tool_code")
                        .HasColumnType("text");

                    b.Property<int>("ToolGroupId")
                        .HasColumnName("tool_group_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("tool");
                });

            modelBuilder.Entity("qcs_product.API.Models.ToolActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActivityCode")
                        .HasColumnName("activity_code")
                        .HasColumnType("text");

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnName("activity_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ActivityId")
                        .HasColumnName("activity_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnName("expired_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ToolId")
                        .HasColumnName("tool_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("tool_activity");
                });

            modelBuilder.Entity("qcs_product.API.Models.ToolGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Label")
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("ObjectStatus")
                        .HasColumnName("object_status")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("tool_group");
                });

            modelBuilder.Entity("qcs_product.API.Models.ToolPurpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying");

                    b.Property<int>("ToolId")
                        .HasColumnName("tool_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("tool_purpose");
                });

            modelBuilder.Entity("qcs_product.API.Models.ToolPurposeToMasterPurpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<int?>("PurposeId")
                        .HasColumnName("purpose_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying");

                    b.Property<int>("ToolPurposeId")
                        .HasColumnName("tool_purpose_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("tool_purpose_to_master_purpose");
                });

            modelBuilder.Entity("qcs_product.API.Models.ToolSamplingPointLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AttachmentFile")
                        .IsRequired()
                        .HasColumnName("attachment_file")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("file_name")
                        .HasColumnType("character varying");

                    b.Property<string>("FileType")
                        .HasColumnName("file_type")
                        .HasColumnType("character varying");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying");

                    b.Property<int?>("ToolPurposeId")
                        .HasColumnName("tool_purpose_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("tool_sampling_point_layout");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("transaction_activity","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AttachmentNotes")
                        .HasColumnName("attachment_notes")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<int>("RequestQcsId")
                        .HasColumnName("request_qcs_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("transaction_batch_pk");

                    b.ToTable("transaction_batch","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionBatchAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AttachmentFile")
                        .HasColumnName("attachment_file")
                        .HasColumnType("character varying");

                    b.Property<string>("AttachmentStorageName")
                        .HasColumnName("attachment_storage_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<string>("FileName")
                        .HasColumnName("file_name")
                        .HasColumnType("character varying");

                    b.Property<string>("FileType")
                        .HasColumnName("file_type")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("TrsBatchId")
                        .HasColumnName("trs_batch_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("transaction_batch_attachments_pk");

                    b.ToTable("transaction_batch_attachments","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionBatchLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id")
                        .HasColumnType("integer");

                    b.Property<string>("ItemName")
                        .HasColumnName("item_name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NoBatch")
                        .HasColumnName("no_batch")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("character varying");

                    b.Property<int>("TrsBatchId")
                        .HasColumnName("trs_batch_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("transaction_batch_lines_pk");

                    b.ToTable("transaction_batch_lines","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionBuilding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BuildingId")
                        .IsRequired()
                        .HasColumnName("building_id")
                        .HasColumnType("character varying");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnName("building_name")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId")
                        .HasName("transaction_building_idx_building_on_building_id");

                    b.ToTable("transaction_building","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<string>("FacilityCode")
                        .IsRequired()
                        .HasColumnName("facility_code")
                        .HasColumnType("character varying");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasColumnName("facility_name")
                        .HasColumnType("character varying");

                    b.Property<int?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("transaction_facility","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionFacilityRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<int>("FacilityId")
                        .HasColumnName("facility_id")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("RoomId");

                    b.ToTable("transaction_facility_room","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionGradeRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("GradeRoomDefault")
                        .HasColumnName("grade_room_default")
                        .HasColumnType("character varying");

                    b.Property<bool?>("GradeRoomIdentificationTest")
                        .HasColumnName("grade_room_identification_test")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("ObjectStatus")
                        .HasColumnName("object_status")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TestGroupId")
                        .HasColumnName("test_group_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("transaction_grade_room","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BiohrOrganizationId")
                        .HasColumnName("biohr_organization_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("OrgCode")
                        .IsRequired()
                        .HasColumnName("org_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("transaction_organization","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionPurposes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("transaction_purposes","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionRelGradeRoomScenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<int>("GradeRoomId")
                        .HasColumnName("grade_room_id")
                        .HasColumnType("integer");

                    b.Property<int>("TestScenarioId")
                        .HasColumnName("test_scenario_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GradeRoomId");

                    b.HasIndex("TestScenarioId");

                    b.ToTable("transaction_rel_grade_room_scenario","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionRelRoomSamplingPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<int>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomPurposeId")
                        .HasColumnName("room_purpose_id")
                        .HasColumnType("integer");

                    b.Property<int>("SamplingPoinId")
                        .HasColumnName("sampling_poin_id")
                        .HasColumnType("integer");

                    b.Property<string>("ScenarioLabel")
                        .HasColumnName("scenario_label")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("SamplingPoinId");

                    b.ToTable("transaction_rel_room_sampling_point","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionRelSamplingPurposeToolGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<int>("PurposeId")
                        .HasColumnName("purpose_id")
                        .HasColumnType("integer");

                    b.Property<int>("ToolGroupId")
                        .HasColumnName("tool_group_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PurposeId");

                    b.HasIndex("ToolGroupId");

                    b.ToTable("transaction_rel_sampling_purpose_tool_group","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionRelSamplingTestParam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<int>("SamplingPointId")
                        .HasColumnName("sampling_point_id")
                        .HasColumnType("integer");

                    b.Property<int>("TestScenarioParamId")
                        .HasColumnName("test_scenario_param_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SamplingPointId");

                    b.HasIndex("TestScenarioParamId");

                    b.ToTable("transaction_rel_sampling_test_param","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionRelSamplingTool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<int>("SamplingPoinId")
                        .HasColumnName("sampling_poin_id")
                        .HasColumnType("integer");

                    b.Property<string>("ScenarioLabel")
                        .HasColumnName("scenario_label")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("ToolId")
                        .HasColumnName("tool_id")
                        .HasColumnType("integer");

                    b.Property<int?>("ToolPurposeId")
                        .HasColumnName("tool_purpose_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SamplingPoinId");

                    b.ToTable("transaction_rel_sampling_tool","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionRelTestScenarioParam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<int>("TestParameterId")
                        .HasColumnName("test_parameter_id")
                        .HasColumnType("integer");

                    b.Property<int>("TestScenarioId")
                        .HasColumnName("test_scenario_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestParameterId");

                    b.HasIndex("TestScenarioId");

                    b.ToTable("transaction_rel_test_scenario_param","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Ahu")
                        .HasColumnName("ahu")
                        .HasColumnType("integer");

                    b.Property<int?>("AirChangeOperator")
                        .HasColumnName("air_change_operator")
                        .HasColumnType("integer");

                    b.Property<decimal?>("AirChangeValue")
                        .HasColumnName("air_change_value")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AirChangeValueFrom")
                        .HasColumnName("air_change_value_from")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AirChangeValueTo")
                        .HasColumnName("air_change_value_to")
                        .HasColumnType("numeric");

                    b.Property<int?>("Area")
                        .HasColumnName("area")
                        .HasColumnType("integer");

                    b.Property<int?>("BuildingId")
                        .HasColumnName("building_id")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Floor")
                        .HasColumnName("floor")
                        .HasColumnType("character varying");

                    b.Property<int>("GradeRoomId")
                        .HasColumnName("grade_room_id")
                        .HasColumnType("integer");

                    b.Property<int?>("HumidityOperator")
                        .HasColumnName("humidity_operator")
                        .HasColumnType("integer");

                    b.Property<decimal?>("HumidityValue")
                        .HasColumnName("humidity_value")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("HumidityValueFrom")
                        .HasColumnName("humidity_value_from")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("HumidityValueTo")
                        .HasColumnName("humidity_value_to")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("ObjectStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("object_status")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("3");

                    b.Property<int?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("PosId")
                        .HasColumnName("pos_id")
                        .HasColumnType("character varying");

                    b.Property<int?>("PressureOperator")
                        .HasColumnName("pressure_operator")
                        .HasColumnType("integer");

                    b.Property<decimal?>("PressureValue")
                        .HasColumnName("pressure_value")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PressureValueFrom")
                        .HasColumnName("pressure_value_from")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PressureValueTo")
                        .HasColumnName("pressure_value_to")
                        .HasColumnType("numeric");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("TemperatureOperator")
                        .HasColumnName("temperature_operator")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TemperatureValue")
                        .HasColumnName("temperature_value")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TemperatureValueFrom")
                        .HasColumnName("temperature_value_from")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TemperatureValueTo")
                        .HasColumnName("temperature_value_to")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("transaction_room","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionRoomPurpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("transaction_room_purpose","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionRoomPurposeToMasterPurpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("PurposeId")
                        .HasColumnName("purpose_id")
                        .HasColumnType("integer");

                    b.Property<int>("RoomPurposeId")
                        .HasColumnName("room_purpose_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("transaction_room_purpose_to_master_purpose","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionRoomSamplingPointLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AttachmentFile")
                        .IsRequired()
                        .HasColumnName("attachment_file")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("file_name")
                        .HasColumnType("character varying");

                    b.Property<string>("FileType")
                        .HasColumnName("file_type")
                        .HasColumnType("character varying");

                    b.Property<int>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomPurposeId")
                        .HasColumnName("room_purpose_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("transaction_room_sampling_point_layout","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionSamplingPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("integer");

                    b.Property<int?>("ToolId")
                        .HasColumnName("tool_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("transaction_sampling_point","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionTestParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int?>("QcProcessId")
                        .HasColumnName("qc_process_id")
                        .HasColumnType("integer");

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("TestGroupId")
                        .HasColumnName("test_group_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("QcProcessId");

                    b.HasIndex("TestGroupId");

                    b.ToTable("transaction_test_parameter","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionTestScenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Label")
                        .HasColumnName("label")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("transaction_test_scenario","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionTestVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("integer");

                    b.Property<int>("TestParameterId")
                        .HasColumnName("test_parameter_id")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ThresholdValueFrom")
                        .HasColumnName("threshold_value_from")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ThresholdValueTo")
                        .HasColumnName("threshold_value_to")
                        .HasColumnType("numeric");

                    b.Property<int>("TresholdOperator")
                        .HasColumnName("treshold_operator")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TresholdValue")
                        .HasColumnName("treshold_value")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("VariableName")
                        .IsRequired()
                        .HasColumnName("variable_name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("TestParameterId");

                    b.ToTable("transaction_test_variable","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionTool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("facility_id")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("GradeRoomId")
                        .HasColumnName("grade_room_id")
                        .HasColumnType("integer");

                    b.Property<int?>("MachineId")
                        .HasColumnName("machine_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("ObjectStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("object_status")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("3");

                    b.Property<int?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumberId")
                        .HasColumnName("serial_number_id")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ToolCode")
                        .IsRequired()
                        .HasColumnName("tool_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int>("ToolGroupId")
                        .HasColumnName("tool_group_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ToolGroupId");

                    b.ToTable("transaction_tool","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionToolActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActivityCode")
                        .IsRequired()
                        .HasColumnName("activity_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnName("activity_date")
                        .HasColumnType("date");

                    b.Property<int>("ActivityId")
                        .HasColumnName("activity_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnName("expired_date")
                        .HasColumnType("date");

                    b.Property<int>("ToolId")
                        .HasColumnName("tool_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ToolId");

                    b.ToTable("transaction_tool_activity","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionToolGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("transaction_tool_group","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionToolPurpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<int>("ToolId")
                        .HasColumnName("tool_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("transaction_tool_purpose","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionToolPurposeToMasterPurpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<int?>("PurposeId")
                        .HasColumnName("purpose_id")
                        .HasColumnType("integer");

                    b.Property<int>("ToolPurposeId")
                        .HasColumnName("tool_purpose_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("transaction_tool_purpose_to_master_purpose","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionToolSamplingPointLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AttachmentFile")
                        .IsRequired()
                        .HasColumnName("attachment_file")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("file_name")
                        .HasColumnType("character varying");

                    b.Property<string>("FileType")
                        .HasColumnName("file_type")
                        .HasColumnType("character varying");

                    b.Property<int?>("ToolPurposeId")
                        .HasColumnName("tool_purpose_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("transaction_tool_sampling_point_layout","transaction");
                });

            modelBuilder.Entity("qcs_product.API.Models.TypeForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("TypeFormCode")
                        .HasColumnName("type_form_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("type_forms");
                });

            modelBuilder.Entity("qcs_product.API.Models.Uom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Label")
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("UomId")
                        .HasColumnName("uom_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("uom");
                });

            modelBuilder.Entity("qcs_product.API.Models.UserTesting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id2")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("JenisKelamin")
                        .HasColumnName("jenis_kelamin")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserTestings");
                });

            modelBuilder.Entity("qcs_product.API.Models.WorkflowHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Action")
                        .HasColumnName("action")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PicNik")
                        .HasColumnName("pic_nik")
                        .HasColumnType("text");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("WorkflowDocumentCode")
                        .HasColumnName("workflow_document_code")
                        .HasColumnType("text");

                    b.Property<string>("WorkflowStatus")
                        .HasColumnName("workflow_status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("workflow_history");
                });

            modelBuilder.Entity("qcs_product.API.Models.WorkflowQcSampling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsInWorkflow")
                        .HasColumnName("is_in_workflow")
                        .HasColumnType("boolean");

                    b.Property<int>("QcSamplingId")
                        .HasColumnName("qc_sampling_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("WorkflowCode")
                        .HasColumnName("workflow_code")
                        .HasColumnType("text");

                    b.Property<string>("WorkflowDocumentCode")
                        .HasColumnName("workflow_document_code")
                        .HasColumnType("text");

                    b.Property<string>("WorkflowStatus")
                        .HasColumnName("workflow_status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("workflow_qc_sampling");
                });

            modelBuilder.Entity("qcs_product.API.Models.WorkflowQcTransactionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<bool?>("IsInWorkflow")
                        .HasColumnName("is_in_workflow")
                        .HasColumnType("boolean");

                    b.Property<int>("QcTransactionGroupId")
                        .HasColumnName("qc_transaction_group_id")
                        .HasColumnType("integer");

                    b.Property<string>("RowStatus")
                        .HasColumnName("row_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("WorkflowCode")
                        .HasColumnName("workflow_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("WorkflowDocumentCode")
                        .HasColumnName("workflow_document_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("WorkflowStatus")
                        .HasColumnName("workflow_status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("QcTransactionGroupId");

                    b.ToTable("workflow_qc_transaction_group");
                });

            modelBuilder.Entity("qcs_product.API.Models.FormMaterial", b =>
                {
                    b.HasOne("qcs_product.API.Models.QcProcess", "Process")
                        .WithMany("FormMaterial")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("fk_qc_process")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.FormParameter", b =>
                {
                    b.HasOne("qcs_product.API.Models.FormProcedure", null)
                        .WithMany("FormParameter")
                        .HasForeignKey("FormProcedureId");
                });

            modelBuilder.Entity("qcs_product.API.Models.FormProcedure", b =>
                {
                    b.HasOne("qcs_product.API.Models.QcProcess", "Process")
                        .WithMany("FormProcedure")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("fk_qc_process")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.FormTool", b =>
                {
                    b.HasOne("qcs_product.API.Models.QcProcess", "Process")
                        .WithMany("FormTool")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("fk_qc_process")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.QcSample", b =>
                {
                    b.HasOne("qcs_product.API.Models.QcSampling", null)
                        .WithMany("Samples")
                        .HasForeignKey("QcSamplingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.QcSamplingAttachment", b =>
                {
                    b.HasOne("qcs_product.API.Models.QcSampling", null)
                        .WithMany("Attachments")
                        .HasForeignKey("QcSamplingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.QcSamplingMaterial", b =>
                {
                    b.HasOne("qcs_product.API.Models.QcSampling", null)
                        .WithMany("Materials")
                        .HasForeignKey("QcSamplingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.QcSamplingShipmentTracker", b =>
                {
                    b.HasOne("qcs_product.API.Models.QcSamplingShipment", null)
                        .WithMany("QcSamplingShipmentTrackers")
                        .HasForeignKey("QcSamplingShipmentId");
                });

            modelBuilder.Entity("qcs_product.API.Models.QcSamplingTools", b =>
                {
                    b.HasOne("qcs_product.API.Models.QcSampling", null)
                        .WithMany("Tools")
                        .HasForeignKey("QcSamplingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.QcTransactionGroupFormParameter", b =>
                {
                    b.HasOne("qcs_product.API.Models.QcTransactionGroupFormProcedure", null)
                        .WithMany("TransactionGroupFormParameters")
                        .HasForeignKey("QcTransactionGroupFormProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.QcTransactionGroupFormProcedure", b =>
                {
                    b.HasOne("qcs_product.API.Models.QcTransactionGroupProcess", null)
                        .WithMany("TransactionGroupFormProcedures")
                        .HasForeignKey("QcTransactionGroupProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.QcTransactionGroupFormTool", b =>
                {
                    b.HasOne("qcs_product.API.Models.QcTransactionGroupProcess", null)
                        .WithMany("TransactionGroupFormTools")
                        .HasForeignKey("QcTransactionGroupProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.QcTransactionGroupProcess", b =>
                {
                    b.HasOne("qcs_product.API.Models.QcTransactionGroup", null)
                        .WithMany("TransactionGroupProcesses")
                        .HasForeignKey("QcTransactionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.QcTransactionGroupSample", b =>
                {
                    b.HasOne("qcs_product.API.Models.QcTransactionGroup", null)
                        .WithMany("TransactionGroupSamples")
                        .HasForeignKey("QcTransactionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.QcTransactionGroupSampleValue", b =>
                {
                    b.HasOne("qcs_product.API.Models.QcTransactionGroupFormParameter", null)
                        .WithMany("TransactionGroupSampleValues")
                        .HasForeignKey("QcTransactionGroupFormParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.QcTransactionGroupSampling", b =>
                {
                    b.HasOne("qcs_product.API.Models.QcTransactionGroup", null)
                        .WithMany("TransactionGroupSamplings")
                        .HasForeignKey("QcTransactionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.QcTransactionGroupValue", b =>
                {
                    b.HasOne("qcs_product.API.Models.QcTransactionGroupFormParameter", null)
                        .WithMany("TransactionGroupValues")
                        .HasForeignKey("QcTransactionGroupFormParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.TestTypeQcs", b =>
                {
                    b.HasOne("qcs_product.API.Models.RequestQcs", null)
                        .WithMany("TestTypeQcs")
                        .HasForeignKey("RequestQcsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionFacility", b =>
                {
                    b.HasOne("qcs_product.API.Models.TransactionOrganization", "Organization")
                        .WithMany("TransactionFacility")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_transaction_facility_organization");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionFacilityRoom", b =>
                {
                    b.HasOne("qcs_product.API.Models.TransactionFacility", "Facility")
                        .WithMany("TransactionFacilityRoom")
                        .HasForeignKey("FacilityId")
                        .HasConstraintName("fk_transaction_facility_room")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("qcs_product.API.Models.TransactionRoom", "Room")
                        .WithMany("TransactionFacilityRoom")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("transaction_facility_room_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionRelGradeRoomScenario", b =>
                {
                    b.HasOne("qcs_product.API.Models.TransactionGradeRoom", "GradeRoom")
                        .WithMany("TransactionRelGradeRoomScenario")
                        .HasForeignKey("GradeRoomId")
                        .HasConstraintName("fk_transaction_grade_room")
                        .IsRequired();

                    b.HasOne("qcs_product.API.Models.TransactionTestScenario", "TestScenario")
                        .WithMany("TransactionRelGradeRoomScenario")
                        .HasForeignKey("TestScenarioId")
                        .HasConstraintName("fk_transaction_test_scenario")
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionRelRoomSamplingPoint", b =>
                {
                    b.HasOne("qcs_product.API.Models.TransactionSamplingPoint", "SamplingPoin")
                        .WithMany("TransactionRelRoomSamplingPoint")
                        .HasForeignKey("SamplingPoinId")
                        .HasConstraintName("transaction_rel_room_sampling_point_fk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionRelSamplingPurposeToolGroup", b =>
                {
                    b.HasOne("qcs_product.API.Models.TransactionPurposes", "Purpose")
                        .WithMany("TransactionRelSamplingPurposeToolGroup")
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("qcs_product.API.Models.TransactionToolGroup", "ToolGroup")
                        .WithMany()
                        .HasForeignKey("ToolGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionRelSamplingTestParam", b =>
                {
                    b.HasOne("qcs_product.API.Models.TransactionSamplingPoint", "SamplingPoint")
                        .WithMany("TransactionRelSamplingTestParam")
                        .HasForeignKey("SamplingPointId")
                        .HasConstraintName("fk_transaction_sampling_point")
                        .IsRequired();

                    b.HasOne("qcs_product.API.Models.TransactionRelTestScenarioParam", "TestScenarioParam")
                        .WithMany("TransactionRelSamplingTestParam")
                        .HasForeignKey("TestScenarioParamId")
                        .HasConstraintName("fk_transaction_test_scenario_param")
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionRelSamplingTool", b =>
                {
                    b.HasOne("qcs_product.API.Models.TransactionSamplingPoint", "SamplingPoin")
                        .WithMany("TransactionRelSamplingTool")
                        .HasForeignKey("SamplingPoinId")
                        .HasConstraintName("transaction_rel_sampling_tool_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionRelTestScenarioParam", b =>
                {
                    b.HasOne("qcs_product.API.Models.TransactionTestParameter", "TestParameter")
                        .WithMany("TransactionRelTestScenarioParam")
                        .HasForeignKey("TestParameterId")
                        .HasConstraintName("fk_transaction_test_parameter")
                        .IsRequired();

                    b.HasOne("qcs_product.API.Models.TransactionTestScenario", "TestScenario")
                        .WithMany("TransactionRelTestScenarioParam")
                        .HasForeignKey("TestScenarioId")
                        .HasConstraintName("fk_transaction_test_scenario")
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionRoom", b =>
                {
                    b.HasOne("qcs_product.API.Models.TransactionOrganization", "Organization")
                        .WithMany("TransactionRoom")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_transaction_room_1");
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionTestParameter", b =>
                {
                    b.HasOne("qcs_product.API.Models.TransactionOrganization", "Organization")
                        .WithMany("TransactionTestParameter")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("transaction_test_parameter_fk2");

                    b.HasOne("qcs_product.API.Models.QcProcess", "QcProcess")
                        .WithMany()
                        .HasForeignKey("QcProcessId");

                    b.HasOne("qcs_product.API.Models.EnumConstant", "TestGroup")
                        .WithMany()
                        .HasForeignKey("TestGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionTestVariable", b =>
                {
                    b.HasOne("qcs_product.API.Models.TransactionRelTestScenarioParam", "TestParameter")
                        .WithMany("TransactionTestVariable")
                        .HasForeignKey("TestParameterId")
                        .HasConstraintName("transaction_test_variable_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionTool", b =>
                {
                    b.HasOne("qcs_product.API.Models.TransactionToolGroup", "ToolGroup")
                        .WithMany()
                        .HasForeignKey("ToolGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.TransactionToolActivity", b =>
                {
                    b.HasOne("qcs_product.API.Models.TransactionActivity", "Activity")
                        .WithMany("TransactionToolActivity")
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("transaction_tool_activity_fk2")
                        .IsRequired();

                    b.HasOne("qcs_product.API.Models.TransactionTool", "Tool")
                        .WithMany("TransactionToolActivity")
                        .HasForeignKey("ToolId")
                        .HasConstraintName("transaction_tool_activity_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("qcs_product.API.Models.WorkflowQcTransactionGroup", b =>
                {
                    b.HasOne("qcs_product.API.Models.QcTransactionGroup", "QcTransactionGroup")
                        .WithMany("WorkflowQcTransactionGroup")
                        .HasForeignKey("QcTransactionGroupId")
                        .HasConstraintName("fk__qc_transaction_group")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
